//GammalKalender
<DayPicker
  id="kalendern"
  selectedDays={this.state.valtDatum}
  onDayClick={this.clickDagEvent}
/>


/*
  printTable(){

    console.log(JSON.stringify(this.props.bokningsarray));
    let bokingsarray_prop = this.props.bokningsarray;
    let t_datatable = bokingsarray_prop.map( (bokingobject) => {
      return (
        <tr className="bordertable" key={bokingobject.t_id}>
          <td className="bordertable">{bokingobject.t_time}</td>
          <td className="bordertable">{bokingobject.t_name}</td>
          <td className="bordertable">{bokingobject.t_phone}</td>
          <td className="bordertable">{bokingobject.t_treatment}</td>
          <td className="bordertable">[+]</td>
        </tr>
      )
    })
  }
*/


 //Plockar ut bokningar för valt datum! Kanke ska ligga i förälder Komponent?
    //let bokingsarray_prop = this.props.bokningsarray.filter(function (e) {
      //return e.t_date === this.props.valtkalenederdatum;
    //});

//bokingTableButtClick(evt){
  //const t_name = evt.target.getAttribute('value');
  //console.log(`tableButtClick: ${evt.target.id} : ${t_name}`);
  //this.props.buttValdBokingEvt(evt);
//}

//bokingTableRowClick(e){
  //const row = e.target.getAttribute('data-title');
  //console.log(`rowClick ${row.t_name}`);
  //this.props.buttValdBokingEvt(evt.key);
//}
    


    //Sorterar efter tid
    //Comperator Arrowfunktion
    //let compareTime = (boking_a, boking_b) => {
      //if (boking_a.t_time < boking_b.t_time){
        //return -1;
      //}
      //if (boking_a.t_time > boking_b.t_time){
        //return 1;
      //}
      //return 0;
    //}
    //console.log("Ej Sorterad: " + JSON.stringify(bokingsarray_prop));



//lägger till den nya bokningen till state arraybokningar
        //Gammalt---------------------------------------------------------
        //arraybokningar: [...this.state.arraybokningar, bokning],
        //uppdatera bokningskoll text med hjälpa av set state
        //---------------------------------------------------------------
        //NYTT--
        //state_vald_dag_arraybokningar: t_dagarray_bokningar,
        //--

        //GAMMALT------------------------------------------------------------------------------------
    //Truncerar och lägger till den nya arrayen med den nya tillagda bokningen  till LocalStorage
    //localStorage.setItem('bokningar', JSON.stringify(this.state.arraybokningar));
    //console.log("Längd: " + this.state.state_dagensbokningar.length);
    //------------------------------------------------------------------


    //GAMMALT componentDidMount() -------------------------------------------------------------------------
  //---if (t_bokingsarray){
    //const savedBokings = JSON.parse(t_bokingsarray);

    //this.setState({
      //arraybokningar: savedBokings
    //});
    //console.log('ComponentDidMount-Alla bokningar: ', t_bokingsarray);
    //console.log('ComponentDidMount-Alla bokningar');
  //}
  //else{
    //console.log('ComponentDidMount-Inga bokningar');
  //--}



  ------------------------------------------------------
  //Lägger till de nya bokningsobjektet till arrayen
    //bokingArrayObjects.push(new_boking_obj); 
        //console.log(`Class LoacalStorageHandler lägger till: ${new_boking_obj}`);
        //Sparar ner de till LocalStorage
    //localStorage.setItem(this.key, JSON.stringify(bokingArrayObjects));



       //Hämtar jsons sträng array från LocalStorage med bokningar
        //bokingArray = localStorage.getItem(this.key);
        //console.log(`LocalStorage.addBoking: ${bokingArray}`);
        //let bokingArrayObjects = JSON.parse(bokingArray);


//---------------------------------

/*Detta tar plockar ut dagens bokningar från localstorage för att visa i BokingTable.
    Så detta behövs ej om man hämtar dagar med bokningar från databas!
    Då kommer arraybokningar att vara dag bokningar och inte alla bokningar.
    */
    //let valtdatum = this.state.valtDatumTextfelt;
    //GAMMALT----------------------------------------------------------------------
    //let t_array_dagens_bokningar = this.state.arraybokningar.filter(function (e) {
    //return e.t_date === valtdatum;
    //});
    //Slut på dag bokningar

----------------------------------------------------
     <div className="rooten">      

     :root {
    --bg: darkgreen;
    --bg-accent: green;
    --text-color: white;
    --border: green;
    --borer-radius: 8px;
    --speed: 500ms;

    //
    //import Bokning from './Bokning';

export default class DbBokingTest {
  constructor() {

  }

  getDayBokings(arraybokningar, datumet){

    let result = arraybokningar.filter( function(boking){
      return boking.datum === datumet
    });

    return result;
  }
}
}


//lite loopa ----------------------------------------------------------------------------------------
//t_assistents.forEach( (t_assis) => {

      //t_this_daybokings.forEach( (t_dayboking) => {
        
        //console.log(`boking = ${JSON.stringify(t_dayboking)}`);

        //if (t_dayboking.t_assistent === t_assis){
          //console.log(`boking = ${JSON.stringify(t_dayboking)}`);
        //}

      //});
    
  //});

  /*
  let t_array_table = t_assistents.map( (t_assis) => { return t_this_daybokings.filter( (t_dayboking) => { 
      if (t_assistents===t_dayboking.t_assistent)
        return t_dayboking;  
    });
  });
  */


  //Gammal fungerand router utan start component
   <BrowserRouter>
      <Navbar />
           
      <Routes>
        <Route path="/" element={<JlBokingComp />} exact />
        <Route path="/dagsavslut" element={<Dagsavslut />} exact />
        <Route path="/om" element={<Om />} exact />
        
         
      </Routes>
      
    </BrowserRouter>